<#@ template debug="false" hostspecific="true" language="C#" #>
<#+ void MappingConfiguratorOnModelCreating(
		GenerationContext context,
		Func<AttributeInfo, string> getFieldMapping,
		Func<ContentInfo, string> getTableMapping,
		Func<ContentInfo, AttributeInfo, string> getLinkTableMapping,
		Func<ContentInfo, AttributeInfo, string> getReversedLinkTableMapping
		)
{
var model = context.Model;
var settings = context.Settings;
#>
base.OnModelCreating(modelBuilder);
<#+
        foreach(ContentInfo content in model.Contents)
        {
#>

            #region <#=content.MappedName#> mappings
            modelBuilder.Entity<<#=content.MappedName#>>()
                .ToTable(<#=getTableMapping(content)#>)
                .Property(x => x.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("CONTENT_ITEM_ID");
           
		    modelBuilder.Entity<<#=content.MappedName#>>()
                .Property(x => x.LastModifiedBy)
                .HasColumnName("LAST_MODIFIED_BY");
            
            modelBuilder.Entity<<#=content.MappedName#>>()
                .Property(x => x.StatusTypeId)
                .HasColumnName("STATUS_TYPE_ID");

			modelBuilder.Entity<<#=content.MappedName#>>()
                .HasOne<StatusType>(x => x.StatusType)
                .WithMany()
				.IsRequired()
                .HasForeignKey(x => x.StatusTypeId); 

<#+
            foreach (var attribute in content.Attributes.Where(x => !x.IsRelation && 
				(x.Name != x.MappedName || (model.Schema.ReplaceUrls && x.CanContainPlaceholders))))
            {
#>
            modelBuilder.Entity<<#=attribute.Content.MappedName#>>()
                .Property(x => x.<#=attribute.MappedName#>)
                .HasColumnName(<#=getFieldMapping(attribute)#>);
<#+
	        }

            foreach (var attribute in content.Attributes.Where(x => x.IsO2M))
            {
#>
            modelBuilder.Entity<<#=attribute.Content.MappedName#>>()
                .HasOne<<#=attribute.RelatedContent.MappedName#>>(mp => mp.<#=attribute.MappedName#>)
                .WithMany(mp => mp.<#=attribute.RelatedAttribute.MappedName#>)
                .HasForeignKey(fp => fp.<#=attribute.OriginalMappedName#>);

            modelBuilder.Entity<<#=attribute.Content.MappedName#>>()
                .Property(x => x.<#=attribute.OriginalMappedName#>)
                .HasColumnName(<#=getFieldMapping(attribute)#>);
<#+
            }

            foreach (var attribute in content.Attributes.Where(x => x.IsM2M && x.IsSource == true))
            {
                if(!settings.UseReversedAssociations || !attribute.RelatedContent.SplitArticles)
                {
#>
			 modelBuilder.Entity<<#=attribute.M2MClassName#>>()
                .ToTable(<#=getLinkTableMapping(content, attribute)#>);

            modelBuilder.Entity<<#=attribute.M2MClassName#>>().Property(e => e.<#=attribute.M2MPropertyName#>_ID).HasColumnName("id");
            modelBuilder.Entity<<#=attribute.M2MClassName#>>().Property(e => e.<#=attribute.M2MRelatedPropertyName#>_ID).HasColumnName("linked_id");
            modelBuilder.Entity<<#=attribute.M2MClassName#>>().HasKey(ug => new { ug.<#=attribute.M2MPropertyName#>_ID, ug.<#=attribute.M2MRelatedPropertyName#>_ID });

            modelBuilder.Entity<<#=attribute.M2MClassName#>>()
                .HasOne(bc => bc.<#=attribute.M2MPropertyName#>)
                .WithMany(b => b.<#=attribute.MappedName#>)
                .HasForeignKey(bc => bc.<#=attribute.M2MPropertyName#>_ID);

            modelBuilder.Entity<<#=attribute.M2MClassName#>>()
                .HasOne(bc => bc.<#=attribute.M2MRelatedPropertyName#>)
                .WithMany(c => c.<#=attribute.RelatedAttribute.MappedName#>)
                .HasForeignKey(bc => bc.<#=attribute.M2MRelatedPropertyName#>_ID);
<#+
                }
                else
                {
#>

             modelBuilder.Entity<<#=attribute.M2MClassName#>>()
                .ToTable(<#=getLinkTableMapping(content, attribute)#>);

            modelBuilder.Entity<<#=attribute.M2MClassName#>>().Property(e => e.<#=attribute.M2MPropertyName#>_ID).HasColumnName("id");
            modelBuilder.Entity<<#=attribute.M2MClassName#>>().Property(e => e.<#=attribute.M2MRelatedPropertyName#>_ID).HasColumnName("linked_id");
            modelBuilder.Entity<<#=attribute.M2MClassName#>>().HasKey(ug => new { ug.<#=attribute.M2MPropertyName#>_ID, ug.<#=attribute.M2MRelatedPropertyName#>_ID });

            modelBuilder.Entity<<#=attribute.M2MClassName#>>()
                .HasOne(bc => bc.<#=attribute.M2MPropertyName#>)
                .WithMany(b => b.<#=attribute.MappedName#>)
                .HasForeignKey(bc => bc.<#=attribute.M2MPropertyName#>_ID);

            modelBuilder.Entity<<#=attribute.M2MClassName#>>()
                .HasOne(bc => bc.<#=attribute.M2MRelatedPropertyName#>)
                .WithMany();


			 modelBuilder.Entity<<#=attribute.M2MReverseClassName#>>()
                .ToTable(<#=getReversedLinkTableMapping(content, attribute)#>);
      

<#+
                    if(attribute.ContentId != attribute.RelatedContentId)
                    {
#>
			modelBuilder.Entity<<#=attribute.M2MReverseClassName#>>().Property(e => e.<#=attribute.M2MReversePropertyName#>_ID).HasColumnName("linked_id");
			modelBuilder.Entity<<#=attribute.M2MReverseClassName#>>().Property(e => e.<#=attribute.M2MReverseRelatedPropertyName#>_ID).HasColumnName("id");
<#+
                    }
                    else
                    {
#>
			modelBuilder.Entity<<#=attribute.M2MReverseClassName#>>().Property(e => e.<#=attribute.M2MReversePropertyName#>_ID).HasColumnName("id");
			modelBuilder.Entity<<#=attribute.M2MReverseClassName#>>().Property(e => e.<#=attribute.M2MReverseRelatedPropertyName#>_ID).HasColumnName("linked_id");
           
<#+
                    }
#>
			modelBuilder.Entity<<#=attribute.M2MReverseClassName#>>().HasKey(ug => new { ug.<#=attribute.M2MReversePropertyName#>_ID, ug.<#=attribute.M2MReverseRelatedPropertyName#>_ID });
            
			 modelBuilder.Entity<<#=attribute.M2MReverseClassName#>>()
                .HasOne(bc => bc.<#=attribute.M2MReverseRelatedPropertyName#>)
                .WithMany(b => b.<#=attribute.RelatedAttribute.MappedName#>)
                .HasForeignKey(bc => bc.<#=attribute.M2MReverseRelatedPropertyName#>_ID);

            modelBuilder.Entity<<#=attribute.M2MReverseClassName#>>()
                .HasOne(bc => bc.<#=attribute.M2MReversePropertyName#>)
                .WithMany();

<#+
                }
            }
#>

<#+			foreach(var attribute in content.Attributes.Where(x => x.GenerateLibraryUrl)) 
		    { #>
            modelBuilder.Entity<<#=attribute.Content.MappedName#>>().Ignore(p => p.<#=attribute.MappedName#>Url);
<#+			} 

  			foreach(var attribute in content.Attributes.Where(x => x.GenerateUploadPath)) 
			{
#>
            modelBuilder.Entity<<#=attribute.Content.MappedName#>>().Ignore(p => p.<#=attribute.MappedName#>UploadPath);
<#+
            }#> 
            #endregion
<#+
        }
#>
<#+}#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#+ void MappingConfiguratorOnModelCreating(
		GenerationContext context,
		Func<AttributeInfo, string> getFieldMapping,
		Func<ContentInfo, string> getTableMapping,
		Func<ContentInfo, AttributeInfo, string> getLinkTableMapping,
		Func<ContentInfo, AttributeInfo, string> getReversedLinkTableMapping
		)
{
var model = context.Model;
var settings = context.Settings;
#>
base.OnModelCreating(modelBuilder);
<#+
        foreach(ContentInfo content in model.Contents)
        {
#>

            #region <#=content.MappedName#> mappings
            modelBuilder.Entity<<#=content.MappedName#>>()
                .ToTable(<#=getTableMapping(content)#>)
                .Property(x => x.Id)
                .HasColumnName("content_item_id");

			 modelBuilder.Entity<<#=content.MappedName#>>()
                .HasKey(x=>x.Id);
           
		    modelBuilder.Entity<<#=content.MappedName#>>()
                .Property(x => x.LastModifiedBy)
                .HasColumnName("last_modified_by");
            
            modelBuilder.Entity<<#=content.MappedName#>>()
                .Property(x => x.StatusTypeId)
                .HasColumnName("status_type_id");

			modelBuilder.Entity<<#=content.MappedName#>>()
                .Property(x => x.Archive)
                .HasColumnName("archive");

			modelBuilder.Entity<<#=content.MappedName#>>()
                .Property(x => x.Created)
                .HasColumnName("created");

			modelBuilder.Entity<<#=content.MappedName#>>()
                .Property(x => x.Modified)
                .HasColumnName("modified");

			modelBuilder.Entity<<#=content.MappedName#>>()
                .Property(x => x.Visible)
                .HasColumnName("visible");

			modelBuilder.Entity<<#=content.MappedName#>>()
                .HasOne<StatusType>(x => x.StatusType)
                .WithMany()
				.IsRequired()
                .HasForeignKey(x => x.StatusTypeId); 

<#+
            foreach (var attribute in content.Attributes.Where(x => !x.IsRelation))
            {
#>
            modelBuilder.Entity<<#=attribute.Content.MappedName#>>()
                .Property(x => x.<#=attribute.MappedName#>)
                .HasColumnName(<#=getFieldMapping(attribute)#>);
<#+
	        }

            foreach (var attribute in content.Attributes.Where(x => x.IsO2M))
            {
#>
            modelBuilder.Entity<<#=attribute.Content.MappedName#>>()
                .HasOne<<#=attribute.RelatedContent.MappedName#>>(mp => mp.<#=attribute.MappedName#>)
                .WithMany(mp => mp.<#=attribute.RelatedAttribute.MappedName#>)
                .HasForeignKey(fp => fp.<#=attribute.OriginalMappedName#>);

            modelBuilder.Entity<<#=attribute.Content.MappedName#>>()
                .Property(x => x.<#=attribute.OriginalMappedName#>)
                .HasColumnName(<#=getFieldMapping(attribute)#>.ToLowerInvariant());
<#+
            }

            foreach (var attribute in content.Attributes.Where(x => x.IsM2M && x.IsSource == true))
            {
                if(!attribute.RelatedContent.SplitArticles)
                {
#>
			modelBuilder.Entity<<#=attribute.Content.MappedName#>>()
                .HasMany(e => e.<#=attribute.MappedName#>)
                .WithMany(e => e.<#=attribute.RelatedAttribute.MappedName#>)
                .UsingEntity<<#=attribute.M2MClassName#>>(
                bc => bc
                    .HasOne(c => c.<#=attribute.M2MPropertyName#>)
                    .WithMany()
                    .HasForeignKey(c => c.<#=attribute.M2MPropertyName#>Id),
                bc => bc
                    .HasOne(c => c.<#=attribute.M2MRelatedPropertyName#>)
                    .WithMany()
                    .HasForeignKey(c => c.<#=attribute.M2MRelatedPropertyName#>Id),
                bc => 
                { 
                    bc.Property(e => e.<#=attribute.M2MPropertyName#>Id).HasColumnName("id");
                    bc.Property(e => e.<#=attribute.M2MRelatedPropertyName#>Id).HasColumnName("linked_id");
                    bc.HasKey(ug => new { ug.<#=attribute.M2MPropertyName#>Id, ug.<#=attribute.M2MRelatedPropertyName#>Id });
                    bc.Ignore(x=>x.Id);
                    bc.Ignore(x=>x.LinkId);
                    bc.Ignore(x=>x.LinkedItemId);
                    bc.Ignore(x=>x.Item);
                    bc.Ignore(x=>x.LinkedItem);
                    bc.ToTable(<#=getLinkTableMapping(content, attribute)#>);
                });
<#+
                }
                else
                {
#>
            modelBuilder.Entity<<#=attribute.Content.MappedName#>>()
                .HasMany(e => e.<#=attribute.MappedName#>)
                .WithMany(e => e.<#=attribute.RelatedAttribute.MappedName#>)
                .UsingEntity<<#=attribute.M2MClassName#>>(
                bc => bc
                    .HasOne(c => c.<#=attribute.M2MRelatedPropertyName#>)
                    .WithMany()
                    .HasForeignKey(c => c.<#=attribute.M2MRelatedPropertyName#>Id),
                bc => bc
                    .HasOne(c => c.<#=attribute.M2MPropertyName#>)
                    .WithMany(),
                bc => 
                { 
                    bc.Property(e => e.<#=attribute.M2MPropertyName#>Id).HasColumnName("id");
                    bc.Property(e => e.<#=attribute.M2MRelatedPropertyName#>Id).HasColumnName("linked_id");
                    bc.HasKey(ug => new { ug.<#=attribute.M2MPropertyName#>Id, ug.<#=attribute.M2MRelatedPropertyName#>Id });
                    bc.Ignore(x=>x.Id);
                    bc.Ignore(x=>x.LinkId);
                    bc.Ignore(x=>x.LinkedItemId);
                    bc.Ignore(x=>x.Item);
                    bc.Ignore(x=>x.LinkedItem);
                    bc.ToTable(<#=getLinkTableMapping(content, attribute)#>);
                });
            
            modelBuilder.Entity<<#=attribute.Content.MappedName#>>()
                .HasMany(e => e.<#=attribute.MappedName#>)
                .WithMany(e => e.<#=attribute.RelatedAttribute.MappedName#>)
                .UsingEntity<<#=attribute.M2MReverseClassName#>>(
                bc => bc
                    .HasOne(c => c.<#=attribute.M2MReverseRelatedPropertyName#>)
                    .WithMany()
                    .HasForeignKey(c => c.<#=attribute.M2MReverseRelatedPropertyName#>Id),
                bc => bc
                    .HasOne(c => c.<#=attribute.M2MReversePropertyName#>)
                    .WithMany(),
                bc => 
                { 
<#+
                    if(attribute.ContentId != attribute.RelatedContentId)
                    {
#>
                    bc.Property(e => e.<#=attribute.M2MReversePropertyName#>Id).HasColumnName("linked_id");
                    bc.Property(e => e.<#=attribute.M2MReverseRelatedPropertyName#>Id).HasColumnName("id");
<#+
                    }
                    else
                    {
#>
			        bc.Property(e => e.<#=attribute.M2MReversePropertyName#>Id).HasColumnName("id");
			        bc.Property(e => e.<#=attribute.M2MReverseRelatedPropertyName#>Id).HasColumnName("linked_id");
           
<#+
                    }
#>
                    bc.HasKey(ug => new { ug.<#=attribute.M2MReversePropertyName#>Id, ug.<#=attribute.M2MReverseRelatedPropertyName#>Id });
                    bc.Ignore(x=>x.Id);
                    bc.Ignore(x=>x.LinkId);
                    bc.Ignore(x=>x.LinkedItemId);
                    bc.Ignore(x=>x.Item);
                    bc.Ignore(x=>x.LinkedItem);
                    bc.ToTable(<#=getReversedLinkTableMapping(content, attribute)#>);
                });

<#+
                }
            }
#>

<#+			foreach(var attribute in content.Attributes.Where(x => x.GenerateLibraryUrl)) 
		    { #>
            modelBuilder.Entity<<#=attribute.Content.MappedName#>>().Ignore(p => p.<#=attribute.MappedName#>Url);
<#+			} 

  			foreach(var attribute in content.Attributes.Where(x => x.GenerateUploadPath)) 
			{
#>
            modelBuilder.Entity<<#=attribute.Content.MappedName#>>().Ignore(p => p.<#=attribute.MappedName#>UploadPath);
<#+
            }#> 
            #endregion
<#+
        }
#>
<#+}#>